######################################################################
# PRODUCTION.YML - Defining the container configuration we will
# utilize for the production level application.  The main difference
# between this and our local development "docker-compose.yml" file is
# that it relies upon the NGINX server while the dev version uses
# the Django development server.
######################################################################
version: '3.1'

services:

    # First we will define the container for our Django application
    gs_app:
        restart: always
        build:
            context: ./app
            dockerfile: Dockerfile
        command: bash run_web.sh
        volumes:
            - ./app/:/code
            - shared-media:/code/media
        depends_on:
            - gs_postgres
        ports:
            - "9000:9000"
        expose:
            - "9000"
        env_file:
            - .env



    # Defining our NGINX Web Server container
    gs_nginx:
        restart: always
        build:
            context: ./nginx
            dockerfile: piDockerfile
        depends_on:
            - gs_app
        volumes:
            - ./app/static:/www/static
            - shared-media:/www/media
        ports:
            - "80:8000"

    # Defining our database server container.
    gs_postgres:
        restart: always
        image: tobi312/rpi-postgresql:latest # Getting the most up-to-date and cool postgres server instance.
        volumes:
            - pg-data:/var/lib/postgresql/data
        ports:
            - "5466:5432" # This allows us to examine our database server
                          # using tools like pgAdmin
        env_file:
          - .env

volumes:
    pg-data: {}
    shared-media: {}
